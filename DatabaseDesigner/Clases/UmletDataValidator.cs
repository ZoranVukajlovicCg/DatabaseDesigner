// --------------------------------------------------------------------------------------------------------------------
// <copyright file="UmletDataValidator.cs" company="N/A">
//   Zoran Vukajlovic
// </copyright>
// <summary>
//   Defines the UmletDataValidator type.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

namespace DatabaseDesigner.Clases
{
    using System.Linq;
    using System.Text;

    using DatabaseDesigner.Entities;

    public static class UmletDataValidator
    {
        public static bool ValidateModel(UmlDataModel model, ref string report)
        {
            var sb = new StringBuilder(report);
            var ret = true;

            foreach (var table in model.UmlTables.ToList())
            {
                if (table.UmlColumns.Count == 0)
                {
                    ret = false;
                    sb.AppendLine(string.Format(@"Validation Error: Table {0} has no columns and has been removed!", table.Name));
                    model.UmlTables.Remove(table);
                    continue;
                }

                var s = string.Empty;
                if (!ValidateIndexes(table, ref s))
                {
                    sb.Append(s);
                    ret = false;
                }
            }

            report = sb.ToString();

            if (string.IsNullOrEmpty(report))
            {
                report = @"Validation successful";
            }

            return ret;
        }

        private static bool ValidateIndexes(UmlTable table, ref string report)
        {
            var ret = true;
            var sb = new StringBuilder(report);
            
            // check if the table name in index is OK
            foreach (var index in table.UmlIndexes.ToList())
            {
                // get all index segments
                var s = index.Name.Split('_');

                // if index has not enough segments
                if (s.Length < 2)
                {
                    ret = false;
                    sb.AppendLine(string.Format(@"Validation Error: Table {0} has invalid index name ({1}). Index removed.", table.Name, index.Name));
                    table.UmlIndexes.Remove(index);
                }

                // check if the table name is valid in index name
                if (s[1] != Util.GetShortTableName(table.Name))
                {
                    ret = false;
                    sb.AppendLine(string.Format(@"Validation Error: Table {0} has invalid index name ({1}). Table name is wrong. Index fixed.", table.Name, index.Name));
                    var newName = new string[s.Length];
                    for (int i = 0; i < s.Length; i++)
                    {
                        newName[i] = i != 1 ? s[i] : Util.GetShortTableName(table.Name);
                    }

                    index.Name = string.Join("_", newName);
                }

                var colError = false;

                // check if the index columns exists
                for (int i = 0; i < index.ColumnList.Length; i++)
                {
                    var col = table.UmlColumns.IndexOf(table.UmlColumns.Find(c => c.Name == index.ColumnList[i]));

                    if (col == -1)
                    {
                        colError = true;
                    }
                }

                if (colError)
                {
                    ret = false;
                    sb.AppendLine(string.Format(@"Validation Error: Table {0} has invalid columns in its index name ({1}). Index removed.", table.Name, index.Name));
                    table.UmlIndexes.Remove(index);
                }
            }
            
            //// check if Status colum, and index exist
            //var statusColumns = table.UmlColumns.IndexOf(table.UmlColumns.Find(c => c.Name == @"Status"));

            //if (statusColumns != -1)
            //{
            //    // check if the right index exists
            //    var statusIndex = table.UmlIndexes.IndexOf(table.UmlIndexes.Find(i => i.Name == string.Format(@"IX_{0}_Status", Util.GetShortTableName(table.Name))));

            //    // if index not exists 
            //    if (statusIndex == -1)
            //    {
            //        // log error
            //        ret = false;
            //        sb.AppendLine(string.Format(@"Validation Error: Table {0} has no index for Status column. Index autogenerated.", table.Name));

            //        // create index
            //        table.UmlIndexes.Add(new UmlIndex { Name = string.Format(@"IX_{0}_Status", Util.GetShortTableName(table.Name)) });
            //    }
            //}

            report = sb.ToString();

            return ret;
        }
    }
}
